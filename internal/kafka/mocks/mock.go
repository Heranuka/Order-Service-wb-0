// Code generated by MockGen. DO NOT EDIT.
// Source: internal/kafka/consumer.go

// Package mock_kafka is a generated GoMock package.
package mock_kafka

import (
	context "context"
	reflect "reflect"
	domain "wb-l0/internal/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockDB) CreateOrder(ctx context.Context, order domain.Order) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockDBMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockDB)(nil).CreateOrder), ctx, order)
}

// MockKafkaConsumerInterface is a mock of KafkaConsumerInterface interface.
type MockKafkaConsumerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaConsumerInterfaceMockRecorder
}

// MockKafkaConsumerInterfaceMockRecorder is the mock recorder for MockKafkaConsumerInterface.
type MockKafkaConsumerInterfaceMockRecorder struct {
	mock *MockKafkaConsumerInterface
}

// NewMockKafkaConsumerInterface creates a new mock instance.
func NewMockKafkaConsumerInterface(ctrl *gomock.Controller) *MockKafkaConsumerInterface {
	mock := &MockKafkaConsumerInterface{ctrl: ctrl}
	mock.recorder = &MockKafkaConsumerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaConsumerInterface) EXPECT() *MockKafkaConsumerInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKafkaConsumerInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKafkaConsumerInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKafkaConsumerInterface)(nil).Close))
}

// Consume mocks base method.
func (m *MockKafkaConsumerInterface) Consume(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockKafkaConsumerInterfaceMockRecorder) Consume(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockKafkaConsumerInterface)(nil).Consume), ctx)
}
