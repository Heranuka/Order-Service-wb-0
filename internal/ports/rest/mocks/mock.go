// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package mock_rest is a generated GoMock package.
package mock_rest

import (
	context "context"
	http "net/http"
	reflect "reflect"
	domain "wb-l0/internal/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderStorage is a mock of OrderStorage interface.
type MockOrderStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStorageMockRecorder
}

// MockOrderStorageMockRecorder is the mock recorder for MockOrderStorage.
type MockOrderStorageMockRecorder struct {
	mock *MockOrderStorage
}

// NewMockOrderStorage creates a new mock instance.
func NewMockOrderStorage(ctrl *gomock.Controller) *MockOrderStorage {
	mock := &MockOrderStorage{ctrl: ctrl}
	mock.recorder = &MockOrderStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderStorage) EXPECT() *MockOrderStorageMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderStorage) CreateOrder(ctx context.Context, order domain.Order) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderStorageMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderStorage)(nil).CreateOrder), ctx, order)
}

// GetAllOrderIDs mocks base method.
func (m *MockOrderStorage) GetAllOrderIDs(ctx context.Context) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrderIDs", ctx)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrderIDs indicates an expected call of GetAllOrderIDs.
func (mr *MockOrderStorageMockRecorder) GetAllOrderIDs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrderIDs", reflect.TypeOf((*MockOrderStorage)(nil).GetAllOrderIDs), ctx)
}

// GetByUID mocks base method.
func (m *MockOrderStorage) GetByUID(ctx context.Context, uid int) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUID", ctx, uid)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUID indicates an expected call of GetByUID.
func (mr *MockOrderStorageMockRecorder) GetByUID(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUID", reflect.TypeOf((*MockOrderStorage)(nil).GetByUID), ctx, uid)
}

// MockServiceRender is a mock of ServiceRender interface.
type MockServiceRender struct {
	ctrl     *gomock.Controller
	recorder *MockServiceRenderMockRecorder
}

// MockServiceRenderMockRecorder is the mock recorder for MockServiceRender.
type MockServiceRenderMockRecorder struct {
	mock *MockServiceRender
}

// NewMockServiceRender creates a new mock instance.
func NewMockServiceRender(ctrl *gomock.Controller) *MockServiceRender {
	mock := &MockServiceRender{ctrl: ctrl}
	mock.recorder = &MockServiceRenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceRender) EXPECT() *MockServiceRenderMockRecorder {
	return m.recorder
}

// Home mocks base method.
func (m *MockServiceRender) Home(arg0 http.ResponseWriter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Home", arg0)
}

// Home indicates an expected call of Home.
func (mr *MockServiceRenderMockRecorder) Home(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Home", reflect.TypeOf((*MockServiceRender)(nil).Home), arg0)
}
